#!/usr/bin/env ruby
pod=<<-POD

=head1 NAME
passenger_status - Munin plugin to monitor passenger application servers.
Monitors the amount of sessions and running, active and maximum amount of passenger instances.

=head1 APPLICABLE SYSTEMS
All systems that have passenger installed.

=head1 CONFIGURATION
The plugin needs to execute passenger-status.
This configuration section shows the defaults of the plugin:

  [passenger_*]
  user root
  command /usr/local/bin/ruby %c
  
Options
  env.passenger_status '/path/to/passenger-status'  # Path to passenger-status
  env.apache_pid_file '/path/to/apache2.pid'        # Path to passenger-status (like /var/run/apache2.pid)
  env.graph_category 'App'                          # Graph Category. Defaults to App.

ln -s /usr/share/munin/plugins/passenger_status /etc/munin/plugins/passenger_status

=head1 INTERPRETATION
The plugin shows the maximum, active and current number of running passenger instances.

=head1 MAGIC MARKERS
  #%# family=auto
  #%# capabilities=autoconf

=head1 VERSION
1.9.7

=head1 BUGS
None known

=head1 AUTHOR
Bart ten Brinke - railsdoctors.com
Daniel Manges - http://gist.github.com/20319

=head1 LICENSE
MIT

POD

# Globals
GRAPH_CATEGORY   = ENV['graph_category'] || 'App'
PASSENGER_STATUS = ENV['passenger_status'] || '/usr/local/bin/passenger-status'
#to use if you have multiple passenger on the host like phusion passenger standalone
if ENV['apache_pid_file']
  PASSENGER_STATUS = "cat #{ENV['apache_pid_file']} | xargs -0 #{PASSENGER_STATUS}"
end

# Check if this plugin can run
def autoconf
  begin
    require 'rubygems'
    gem "passenger", ">=2.0"
  rescue Exception => e
    puts "no (Gem not found: #{e})"
    exit 1
  end
  
  status = `#{PASSENGER_STATUS}`
  unless $?.success?
    puts "no (error whene excuting #{PASSENGER_STATUS})"
    exit 1
  end
  
  puts "yes"
  exit 0
end

# Describe the graph config
def config
  status = `#{PASSENGER_STATUS}`
  
  status =~ /max\s+=\s+(\d+)/
  upper_limit = $1 || 150

  puts <<-CONFIG
graph_category #{GRAPH_CATEGORY}
graph_title Passenger status
graph_vlabel count
graph_args --base 1000 -l 0 --upper-limit #{upper_limit}
graph_info The amount of active passengers on this application server - railsdoctors.com
 
sessions.label sessions
max.label max processes
running.label running processes
active.label active processes
CONFIG
  exit 0
end
 

# Collect the data
# <tt>debug</tt> Show debug information
def run(debug = false)
  status = `#{PASSENGER_STATUS}`
  
  unless $?.success?
    $stderr.puts "failed executing passenger-status"
    exit 1
  end

  puts status if debug

  status =~ /max\s+=\s+(\d+)/
  puts "max.value #{$1}"
 
  status =~ /count\s+=\s+(\d+)/
  puts "running.value #{$1}"
 
  status =~ /active\s+=\s+(\d+)/
  puts "active.value #{$1}"
 
  total_sessions = 0
  status.scan(/Sessions: (\d+)/).flatten.each { |count| total_sessions += count.to_i }
  puts "sessions.value #{total_sessions}"
end
 

# Main
if ARGV[0] == "config"
  config
elsif ARGV[0] == "autoconf"
  autoconf
elsif ARGV[0] == "debug"
  run(true)
else
  run
end
